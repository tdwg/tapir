Specification of a unified protocol for xml based retrieval of distributed data

Version: 0.1 (Draft)
Revision: $Id:
Authors: Markus Döring, Renato De Giovanni

--------------------------------------------------------------------------------
= Contents


--------------------------------------------------------------------------------
= Summary


--------------------------------------------------------------------------------
= Acknowledgements


--------------------------------------------------------------------------------
= Revision history


--------------------------------------------------------------------------------
= Terms and definitions
The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in RFC 2119 [RFC 2119].

= Conventions

The definitions in this specification conform to following syntactical rules.
A definition always starts with a name for the defined entity which is always in capital letters to distinguish it from values or xml tag names which are never entirely composed out of capital letters in this specification.

The following conventions are used in the synopsis of a command: brackets ([ and ]) indicate optional parts. Braces ({ and }) and vertical lines (|) indicate that you must choose one alternative. Dots (...) mean that the preceding element can be repeated.

A single xml tag is specified as it appears in a protocol instance document including < >. If attributes or elements have a xml data type associated, it is shown by using the xml schema data type name with an xs: prefix instead of the value itself.
Example of an element declaration:
LITERAL = <literal value="xs:string">

A class of elements are declared by seperating the individual possible tagnames with a pipe symbol (|) and enclosing all of them in < >.
Example of an element group declaration:
EXPRESSION = <literal | sub | mul | div>

A complex xml structure is represented using the above syntax and enclosing the subelements. Definitions (groups or complex structures) can be used instead of elements.
Example complex structure declaration:
AOP = <add | sub | mul | div> LITERAL1 LITERAL2 </...>
Example instance:
<add>
  <literal>


--------------------------------------------------------------------------------
= Introduction

The specified protocol is meant for retrieval of distributed and heterogenous data. It is purely xml based and defines the communication between the different agents of the system. To make the heterogenous data accessible and searchable an xml standard needs to be defined refered to as the conceptual schema. In several places this conceptual schema needs to be referenced directly from within the protocol. This is handled by the conceptual binding described later.

----------
== System architecture & service types

The system recognizes three different agents or service types which are described in detail below. Each of them has its own communication protocol based heavily on a common framework. The seperation into several protocols with their own namespace has the advantage to change the protocol for specific service types or add a new protocol for a new service type without affecting the other already implemented protocols. It also allows a tighter validation and specification of the protocol for each service.

--> graphic: architecture.gif

=== Datasources

A datasource is the sole source of data. It often corresponds to a database or a subset (view) of a database. It is not bound to a specific data standard or "object category" and a datasource response can therefore follow several different conceptual schemas. To be able to work with several schemas for a single datasource there needs to be a relation in the source (database) between all information provided in a datasource. Therefor it is not possible to have several databases acting as a datasource. It also does not make sense to have completely independent objects from each other inside a datasource such as specimen records and a car parts inventory.

=== Providers

Providers are seen as local message brokers and represent a complete software installation capable of querying several local datasources. They act as an umbrella for all local datasources. In most cases they just pass the requests to the appropiate datasource services and pool their responses.

=== Message brokers

Similar to a provider message brokers provide access to multiple datasources. They distribute requests to any number of other services (datasources, providers, other message brokers) and pool their reponses. Other than providers they are not restricted to access only local services and can create cascading services. A message broker may know of a private, local or special interest service registry that allows a message broker to act as a gateway to subnets of the network.


----------
== Protocol schema organisation
The protocol schema is split into seperate schemas for each service type.
Common definitions are bundled in the protocolcore.xsd file which is included by the other schemas.


--------------------------------------------------------------------------------
= Datasource protocol specification



----------
== Access points
	
----------
== Header Information
	
----------
== Conceptual binding
CB = [NS:]$ELEMENT1/ELEMENT2/.../ELEMENTx[/@ATTRIBUTE]

As a way of refering to any element in hierarchical schemas a simple absolute XPath expression is used based only on the child axis in its abbreviated form (/). To uniquely refer to concepts from conceptual schemas a qualified xpath is needed, for a binding to a local structure element a simple XPath without a qualifying namespace is sufficient.

Sample global conceptual binding: 
<xyz concept="spec:/dataset/specimen/sname"/>

Sample local conceptual binding:
<xyz concept="/dataset/specimen/sname/@genus"/>

The later example is refering to the attribute "genus" of the "sname" element:
<dataset>
  <specimen>
    <sname genus="Abies"/>

No other XPath axis or methods are supported than the simple one explained above.
		
----------
== Filter encoding

FILTER = LOP | COP

A valid filter constitutes of a combination of logical operators, comparison operators and expressions which are in turn made from literals, concepts, parameters or arithmetic operations.

=== Expressions

EXPR = LITERAL | CONCEPT | PARAMETER | AOP

Expressions are the basic atoms of a filter. They are solely used to build comparison statements and a valid expression may consist of a literal, a concept, a parameter or an arithmetic operation.

==== Literals

LITERAL = <literal value="xs:string" />

A literal represents a fixed value which is being specified in its value attribute.

==== Concepts

CONCEPT = <concept path="CB" />

A concept is using a conceptual binding to represent a concept defined in a conceptual schema (which in turn is mapped to the local data repository by a provider).

==== Parameters

PARAMETER = <parameter name="PARAMETER_NAME" />

Parameters are similar to literals but instead of having a fixed value, this is taken from external sources such as the Http POST & GET environment variables. The name of the parameter within the POST/GET variables is given by the parameter definition.

==== Arithmetic operators (AOP)

AOP = <add | sub | mul | div> EXPR1 EXPR2 </...>

The 4 basic arithmetic operations <add>, <sub>, <mul>, <div> are all binary and take 2 further expressions as their arguments. The first argument is treated as the leftmost one. The arithmetic expression 13+7 would be encoded like this:

<add>
  <literal value="13"/>
  <literal value="7"/>
</add>


=== Comparison operators (COP)

COP = <isNull path="CB"/>
    | <equals | greaterThan | lesserThan | greaterThanOrEquals | lesserThanOrEquals | like path="CB"> EXPR </...>
    | <in path="CB"> EXPR1 EXPR2 EXPRn </in>

There is no negating operator like is not equal as it can always be generated using the logical NOT operator. The operators can be classified according to the number of arguments they take as unary, binary or unbounded operators.

Each of the operators takes at least one concept as an argument which is specified as an attribute. Binary or unbounded operators are followed by one or more expressions respectively.


=== Logical operators (LOP)

LOP = <and | or> COP1 | LOP1 ... COPn | LOPn </...>
    | <not> COP | LOP </not>

This specification is based on the 3 basic logical operators only. The unary not operator takes a single argument which can be a comparison or logical operator. The <and> and <or> operators are unbounded and can therefore take any number of arguments that exceeds one.


		
----------
== Request types
	
=== Ping request

=== Ping response

	
=== Capabilities request

=== Capabilities response
	

=== Metadata request

=== Metadata response
		

=== Inventory request

=== Inventory response
		

=== Search request

=== Search response
	
----------
== Diagnostics
	
=== Severity & error handling
	
=== Error codes

Common error codes should be used which are grouped into and prefixed by the following:

 * CFG - provider configuration related error
 * DBS - database related errors, eg connections and SQL errors
 * PRG - program specific errors. Some general ones like "missing library" but also implementation specific ones which should as mujch as possible be sub prefixed with the respective software abbreviation eg PHPWRAP or PYWRAP
 * REQ - errors when dealing with the request, eg unknown or unmapped concept encountered.
 * RSP - errors related to creating a response including data transformation errors (eg transformation from db to xml data types).


--------------------------------------------------------------------------------
= Provider protocol specification

The provider service as a local meesage broker is mainly forwarding messages to the individual datasource services. 

----------
== Header Information
Because a provider needs information about which datasource services to address, the header information is different from a datasource service.
...

----------
== Request types
All request types are just forwarded to the individual requested datasource services. The reponse of each datasource is bundled into a single response described below in the Response chapter.

The only request type answered directly by a provider service is the Ping request. 
This should be done in hte same way as described for the datasource service.

----------
== Response
The provider response is bundling all individual datasource responses by wrapping them into a new provider reponse element. The individual datsource protocols should be kept as they were received including their headers and diagnostics.



--------------------------------------------------------------------------------
= Message broker protocol specification

This specification focus on datasource and provider services. The protocol specifying a message broker service should be similar to the provider service, but has additional caveats which we are not addressing here in detail:
 * a message broker can be part of a cascading network:
  * therefore the hierarchy of involved services should be represented in the broker reponse by nesting the responses.
 * all requests apart from the ping request are forwarded to services specified in the destination list of the header. If the destinatio list if empty, all known services should be contacted.
 * is there a need to address specific services somewhere down the cascading net? If a client knows of a specific service, he can send a request to that service directly. Otherwise the header has to be adjusted to accomodate hierarchical structures...
 * the metadata request returns all known services by cascading a metadata request to all services.


--------------------------------------------------------------------------------
= Additional recomendations

----------
== CGI handling 
 * use the GET/POST parameter "request" to pass a xml protocol document.
 * define for all request methods a xml less alternative based on GET/POST http. The filter encoding will still be a xml document!


--------------------------------------------------------------------------------
= Bibliography


--------------------------------------------------------------------------------
= References

[RFC 2119] IETF "RFC 2119: Keywords for use in RFCs to Indicate Requirement Levels", S. Bradner, March 1997. See http://www.ietf.org/rfc/rfc2119.txt


--------------------------------------------------------------------------------
= Annexes

== * newprotocol.xsd

== * common error codes

